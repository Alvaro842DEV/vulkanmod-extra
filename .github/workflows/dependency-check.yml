name: Dependency Security Check

on:
  schedule:
    # Run every Monday at 9 AM UTC
    - cron: '0 9 * * 1'
  workflow_dispatch:
  push:
    paths:
      - 'build.gradle'
      - 'gradle.properties'

jobs:
  dependency-scan:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Java JDK
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'microsoft'
          
      - name: Make Gradle wrapper executable
        run: chmod +x ./gradlew
        
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v3
        with:
          gradle-home-cache-cleanup: false
          
      - name: Generate dependency report
        run: ./gradlew dependencies > dependencies.txt
        
      - name: Check for dependency updates
        run: |
          echo "## Dependency Status Report" > dependency-report.md
          echo "" >> dependency-report.md
          echo "Generated on: $(date)" >> dependency-report.md
          echo "" >> dependency-report.md
          
          # Check current versions against expected versions
          echo "### VulkanMod Extra Dependencies" >> dependency-report.md
          echo "" >> dependency-report.md
          
          # Extract key dependency versions from gradle.properties or build.gradle
          if [ -f "gradle.properties" ]; then
            echo "**Current Versions:**" >> dependency-report.md
            grep -E "(minecraft_version|fabric_version|vulkanmod_version)" gradle.properties >> dependency-report.md || echo "Version info not found in gradle.properties" >> dependency-report.md
            echo "" >> dependency-report.md
          fi
          
          # Check for security vulnerabilities (basic check)
          echo "### Security Scan" >> dependency-report.md
          echo "" >> dependency-report.md
          echo "⚠️ **Note**: This is a basic security check. For production use, consider integrating with specialized security scanning tools." >> dependency-report.md
          echo "" >> dependency-report.md
          
          # Check if any dependencies have known issues
          if grep -i -E "(SNAPSHOT|alpha|beta|rc)" dependencies.txt; then
            echo "**Pre-release dependencies found:**" >> dependency-report.md
            grep -i -E "(SNAPSHOT|alpha|beta|rc)" dependencies.txt >> dependency-report.md
            echo "" >> dependency-report.md
          else
            echo "✅ No pre-release dependencies detected" >> dependency-report.md
            echo "" >> dependency-report.md
          fi
          
        continue-on-error: true
        
      - name: Check VulkanMod compatibility
        run: |
          echo "### VulkanMod Compatibility Check" >> dependency-report.md
          echo "" >> dependency-report.md
          
          # This would ideally check against VulkanMod releases API
          echo "**Target Compatibility:**" >> dependency-report.md
          echo "- Minecraft: 1.21.1" >> dependency-report.md
          echo "- VulkanMod: 0.5.5" >> dependency-report.md
          echo "- Fabric Loader: 0.17.2+" >> dependency-report.md
          echo "- Fabric API: 0.116.5+1.21.1" >> dependency-report.md
          echo "" >> dependency-report.md
          
          # Check build compatibility
          if ./gradlew build --dry-run; then
            echo "✅ Build compatibility check passed" >> dependency-report.md
          else
            echo "❌ Build compatibility check failed" >> dependency-report.md
          fi
          echo "" >> dependency-report.md
        continue-on-error: true
        
      - name: Upload dependency report
        uses: actions/upload-artifact@v4
        with:
          name: dependency-report
          path: |
            dependency-report.md
            dependencies.txt
            
      - name: Create issue for security vulnerabilities
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            // Check if there's already an open security issue
            const { data: issues } = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              labels: 'security,dependencies'
            });
            
            if (issues.length === 0) {
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: '🔒 Dependency Security Scan Failed',
                body: `## Security Scan Alert
                
                The automated dependency security scan has detected potential issues.
                
                **Action Required:**
                1. Review the dependency report artifact from this workflow run
                2. Check for known vulnerabilities in project dependencies
                3. Update dependencies if security issues are found
                4. Verify compatibility with VulkanMod after updates
                
                **Workflow Run:** ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
                
                This issue was automatically created by the dependency security check workflow.`,
                labels: ['security', 'dependencies', 'automated']
              });
            }

  update-check:
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    
    steps:
      - name: Checkout repository  
        uses: actions/checkout@v4
        
      - name: Check for VulkanMod updates
        run: |
          # Check VulkanMod releases (this is a placeholder - would need actual API integration)
          echo "Checking for VulkanMod updates..."
          
          # This would ideally fetch from GitHub releases API
          CURRENT_VULKANMOD=$(grep "vulkanmod_version" gradle.properties | cut -d'=' -f2 || echo "0.5.5")
          echo "Current VulkanMod version: $CURRENT_VULKANMOD"
          
          # For now, just create a notification that manual checking is needed
          echo "UPDATE_CHECK_NEEDED=true" >> $GITHUB_ENV
          
      - name: Create update notification issue
        if: env.UPDATE_CHECK_NEEDED == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            // Check if there's already an open update check issue
            const { data: issues } = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              labels: 'dependencies,update-check'
            });
            
            if (issues.length === 0) {
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: '🔄 Weekly Dependency Update Check',
                body: `## Weekly Update Check
                
                This is a scheduled reminder to check for dependency updates.
                
                **Please check for updates to:**
                - 🎮 **VulkanMod**: Check [VulkanMod releases](https://github.com/xCollateral/VulkanMod/releases)
                - 🧵 **Fabric Loader**: Check [Fabric releases](https://fabricmc.net/develop)
                - 🔧 **Fabric API**: Check [Fabric API releases](https://github.com/FabricMC/fabric/releases)
                - ⚡ **Minecraft**: Check for new Minecraft versions
                
                **Current versions** (from gradle.properties):
                - Minecraft: 1.21.1
                - VulkanMod: 0.5.5  
                - Fabric Loader: 0.17.2+
                - Fabric API: 0.116.5+1.21.1
                
                **After checking:**
                - [ ] Update build.gradle or gradle.properties if needed
                - [ ] Test compatibility thoroughly
                - [ ] Update README.md compatibility section
                - [ ] Close this issue
                
                *This issue is automatically created weekly and can be safely closed if no updates are needed.*`,
                labels: ['dependencies', 'update-check', 'weekly', 'automated']
              });
            }